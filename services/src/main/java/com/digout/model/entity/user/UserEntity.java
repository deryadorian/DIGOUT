package com.digout.model.entity.user;

import com.digout.model.UserOrigin;
import com.digout.model.UserRole;
import com.digout.model.entity.common.AutoGeneratedIdentifier;
import com.digout.model.entity.product.ProductCommentEntity;

import javax.persistence.*;

import org.hibernate.annotations.Type;

import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

@Entity
@Table(name = "USERS", uniqueConstraints = {
        @UniqueConstraint(columnNames = { "username", "is_system_user", "origin" }),
        @UniqueConstraint(columnNames = { "email", "is_system_user", "origin" }) })
public class UserEntity extends AutoGeneratedIdentifier {
    private static final long serialVersionUID = 4100330027776069966L;

    @Embedded
    @AttributeOverrides({ @AttributeOverride(name = "username", column = @Column(name = "username")),
            @AttributeOverride(name = "email", column = @Column(name = "email")) })
    private UserCredentialsEntity userCredentials;

    @Column(name = "fullname", nullable = false)
    private String fullname;

    @OneToMany(targetEntity = UserCommentEntity.class, fetch = FetchType.LAZY, mappedBy = "forUser", cascade = CascadeType.ALL)
    private List<UserCommentEntity> comments;

    @OneToMany(targetEntity = UserAddressEntity.class, fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL)
    private Set<UserAddressEntity> addresses = new HashSet<UserAddressEntity>();

    @OneToMany(targetEntity = UserPhoneEntity.class, fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL)
    private Set<UserPhoneEntity> phones = new HashSet<UserPhoneEntity>();

    @OneToMany(mappedBy = "sender", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<UserMessageEntity> sentMessages;

    @OneToMany(mappedBy = "receiver", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<UserMessageEntity> receivedMessages;

    @OneToMany(mappedBy = "postedBy", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<ProductCommentEntity> productComments;

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(uniqueConstraints = { @UniqueConstraint(columnNames = { "user_id", "friend_id" }) }, name = "user_friends", joinColumns = { @JoinColumn(name = "user_id", referencedColumnName = "id") }, inverseJoinColumns = { @JoinColumn(name = "friend_id", referencedColumnName = "id") })
    private List<UserEntity> friend;

    @OneToMany(mappedBy = "follower", targetEntity = UserFollowerEntity.class, cascade = CascadeType.ALL)
    private Set<UserFollowerEntity> following = new HashSet<UserFollowerEntity>();

    @OneToMany(mappedBy = "followed", targetEntity = UserFollowerEntity.class, cascade = CascadeType.ALL)
    private Set<UserFollowerEntity> followers = new HashSet<UserFollowerEntity>();

    @OneToMany(mappedBy = "user", targetEntity = UserImageEntity.class, cascade = CascadeType.ALL)
    private Set<UserImageEntity> images;

    @Column(name = "rating", nullable = true)
    private Integer rating;

    @Column(name = "mobile_number", nullable = true)
    private String mobileNumber;

    @Column(name = "iban", nullable = true)
    private String iban;

    @Column(name = "is_system_user", nullable = false)
    private boolean isSystemUser = false;

    @Column(name = "role", nullable = false)
    @Enumerated(EnumType.ORDINAL)
    private UserRole role;

    @Column(name = "origin", nullable = false)
    @Enumerated(EnumType.ORDINAL)
    private UserOrigin origin;

    @Column(name = "is_following_notification", nullable = false)
    private boolean isFollowingNotification = false;

    @Column(name = "is_friends_notification", nullable = false)
    private boolean isFriendsNotification = false;

    @Column(name = "is_shortlists_notification", nullable = false)
    private boolean isShortlistsNotification = false;

    @Type(type = "org.hibernate.type.LocaleType")
    @Column(name = "locale", nullable = false)
    private Locale locale = Locale.ENGLISH;
    
    @Column(name = "external_id", nullable = true)
    private String externalId;

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof UserEntity)) {
            return false;
        }
        if (!super.equals(o)) {
            return false;
        }
        UserEntity that = (UserEntity) o;

        if (this.fullname != null ? !this.fullname.equals(that.fullname) : that.fullname != null) {
            return false;
        }
        if (this.userCredentials != null ? !this.userCredentials.equals(that.userCredentials)
                : that.userCredentials != null) {
            return false;
        }

        return true;
    }

    public Set<UserAddressEntity> getAddresses() {
        return this.addresses;
    }

    public List<UserCommentEntity> getComments() {
        return this.comments;
    }

    public Set<UserFollowerEntity> getFollowers() {
        return this.followers;
    }

    public Set<UserFollowerEntity> getFollowing() {
        return this.following;
    }

    public List<UserEntity> getFriend() {
        return this.friend;
    }

    public String getFullname() {
        return this.fullname;
    }

    public String getIban() {
        return this.iban;
    }

    public Set<UserImageEntity> getImages() {
        return this.images;
    }

    public Locale getLocale() {
        return this.locale;
    }

    public String getMobileNumber() {
        return this.mobileNumber;
    }

    public UserOrigin getOrigin() {
        return this.origin;
    }

    public Set<UserPhoneEntity> getPhones() {
        return this.phones;
    }

    public List<ProductCommentEntity> getProductComments() {
        return this.productComments;
    }

    public Integer getRating() {
        return this.rating;
    }

    public List<UserMessageEntity> getReceivedMessages() {
        return this.receivedMessages;
    }

    public UserRole getRole() {
        return this.role;
    }

    public List<UserMessageEntity> getSentMessages() {
        return this.sentMessages;
    }

    public UserCredentialsEntity getUserCredentials() {
        return this.userCredentials;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (this.userCredentials != null ? this.userCredentials.hashCode() : 0);
        result = 31 * result + (this.fullname != null ? this.fullname.hashCode() : 0);
        return result;
    }

    public boolean isFollowingNotification() {
        return this.isFollowingNotification;
    }

    public boolean isFriendsNotification() {
        return this.isFriendsNotification;
    }

    public boolean isShortlistsNotification() {
        return this.isShortlistsNotification;
    }

    public boolean isSystemUser() {
        return this.isSystemUser;
    }

    public void setAddresses(final Set<UserAddressEntity> addresses) {
        this.addresses = addresses;
    }

    public void setComments(final List<UserCommentEntity> comments) {
        this.comments = comments;
    }

    public void setFollowers(final Set<UserFollowerEntity> followers) {
        this.followers = followers;
    }

    public void setFollowing(final Set<UserFollowerEntity> following) {
        this.following = following;
    }

    public void setFollowingNotification(final boolean followingNotification) {
        this.isFollowingNotification = followingNotification;
    }

    public void setFriend(final List<UserEntity> friend) {
        this.friend = friend;
    }

    public void setFriendsNotification(final boolean friendsNotification) {
        this.isFriendsNotification = friendsNotification;
    }

    public void setFullname(final String fullname) {
        this.fullname = fullname;
    }

    public void setIban(final String iban) {
        this.iban = iban;
    }

    public void setImages(final Set<UserImageEntity> images) {
        this.images = images;
    }

    public void setLocale(final Locale locale) {
        this.locale = locale;
    }

    public void setMobileNumber(final String mobileNumber) {
        this.mobileNumber = mobileNumber;
    }

    public void setOrigin(final UserOrigin origin) {
        this.origin = origin;
    }

    public void setPhones(final Set<UserPhoneEntity> phones) {
        this.phones = phones;
    }

    public void setProductComments(final List<ProductCommentEntity> productComments) {
        this.productComments = productComments;
    }

    public void setRating(final Integer rating) {
        this.rating = rating;
    }

    public void setReceivedMessages(final List<UserMessageEntity> receivedMessages) {
        this.receivedMessages = receivedMessages;
    }

    public void setRole(final UserRole role) {
        this.role = role;
    }

    public void setSentMessages(final List<UserMessageEntity> sentMessages) {
        this.sentMessages = sentMessages;
    }

    public void setShortlistsNotification(final boolean shortlistsNotification) {
        this.isShortlistsNotification = shortlistsNotification;
    }

    public void setSystemUser(final boolean isSystemUser) {
        this.isSystemUser = isSystemUser;
    }

    public void setUserCredentials(final UserCredentialsEntity userCredentials) {
        this.userCredentials = userCredentials;
    }

    public String getExternalId() {
        return externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    @Override
    public String toString() {
        return "UserEntity{" + "fullname='" + this.fullname + '\'' + ", mobileNumber='" + this.mobileNumber + '\''
                + ", userCredentials=" + this.userCredentials + '}';
    }
}
