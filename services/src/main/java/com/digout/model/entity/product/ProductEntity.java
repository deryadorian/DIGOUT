package com.digout.model.entity.product;

import com.digout.artifact.ShipmentType;
import com.digout.model.common.ProductStatus;
import com.digout.model.common.SellType;
import com.digout.model.entity.common.AutoGeneratedIdentifier;
import com.digout.model.entity.user.UserAddressEntity;
import com.digout.model.entity.user.UserEntity;
import com.digout.support.money.CurrencyUnit;
import org.hibernate.annotations.Type;
import org.joda.time.DateTime;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "PRODUCTS")
public class ProductEntity extends AutoGeneratedIdentifier {
    private static final long serialVersionUID = 7654143749612962528L;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "information", length = 200)
    private String information;

    @OneToMany(targetEntity = ProductMainImageEntity.class, fetch = FetchType.LAZY, mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<ProductMainImageEntity> mainImages;

    @OneToMany(targetEntity = ProductSecondaryImageEntity.class, fetch = FetchType.LAZY, mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<ProductSecondaryImageEntity> secondaryImages;

    @Column(name = "price", nullable = true)
    private Double price;

    /*
     * @OneToMany(fetch = FetchType.LAZY, mappedBy = "product", cascade = CascadeType.ALL) private
     * List<ProductTagEntity> tags;
     */

    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinTable(name = "PRODUCT_TAGS", uniqueConstraints = @UniqueConstraint(columnNames = { "product_id", "tag_id" }), joinColumns = @JoinColumn(name = "product_id", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "tag_id", referencedColumnName = "tag"))
    private Set<ProductTagEntity> tags = new HashSet<ProductTagEntity>();

    @Column(name = "is_purchasable", nullable = false)
    private Boolean purchasable = true;

    @ManyToOne(targetEntity = UserEntity.class, fetch = FetchType.LAZY,
            cascade = {CascadeType.REFRESH, CascadeType.MERGE, CascadeType.DETACH, CascadeType.PERSIST})
    @JoinColumn(name = "owner_id", nullable = false)
    private UserEntity owner;

    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    private List<FavouriteProductEntity> favouriteProductEntities;

    @Type(type = "org.joda.time.contrib.hibernate.PersistentDateTime")
    @Column(name = "sold_date", nullable = true)
    private DateTime soldDate;

    @Type(type = "org.joda.time.contrib.hibernate.PersistentDateTime")
    @Column(name = "published_date", nullable = true)
    private DateTime publishedDate;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ProductCommentEntity> comments;

    @Column(name = "shipment_type")
    @Enumerated(EnumType.STRING)
    private ShipmentType shipmentType;

    @Column(name = "shipment_id")
    private String shipmentId;

    @Column(name = "currency", nullable = true)
    @Enumerated(EnumType.STRING)
    private CurrencyUnit currency;

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "address_id", nullable = true)
    private UserAddressEntity address;

    @Column(name = "status", nullable = false)
    @Enumerated(EnumType.STRING)
    private ProductStatus status;

    @Column(name = "sell_type", nullable = false)
    @Enumerated(EnumType.STRING)
    private SellType sellType;

    public UserAddressEntity getAddress() {
        return this.address;
    }

    public List<ProductCommentEntity> getComments() {
        return this.comments;
    }

    public CurrencyUnit getCurrency() {
        return this.currency;
    }

    public List<FavouriteProductEntity> getFavouriteProductEntities() {
        return this.favouriteProductEntities;
    }

    public String getInformation() {
        return this.information;
    }

    public Set<ProductMainImageEntity> getMainImages() {
        return this.mainImages;
    }

    public String getName() {
        return this.name;
    }

    public UserEntity getOwner() {
        return this.owner;
    }

    public Double getPrice() {
        return this.price;
    }

    public DateTime getPublishedDate() {
        return this.publishedDate;
    }

    public Set<ProductSecondaryImageEntity> getSecondaryImages() {
        return this.secondaryImages;
    }

    public SellType getSellType() {
        return this.sellType;
    }

    /*
     * public List<ProductTagEntity> getTags() { return tags; }
     * 
     * public void setTags(List<ProductTagEntity> tags) { this.tags = tags; }
     */

    public String getShipmentId() {
        return this.shipmentId;
    }

    public ShipmentType getShipmentType() {
        return this.shipmentType;
    }

    public DateTime getSoldDate() {
        return this.soldDate;
    }

    public ProductStatus getStatus() {
        return this.status;
    }

    public Set<ProductTagEntity> getTags() {
        return this.tags;
    }

    public Boolean isPurchasable() {
        return this.purchasable;
    }

    public void setAddress(final UserAddressEntity address) {
        this.address = address;
    }

    public void setComments(final List<ProductCommentEntity> comments) {
        this.comments = comments;
    }

    public void setCurrency(final CurrencyUnit currency) {
        this.currency = currency;
    }

    public void setFavouriteProductEntities(final List<FavouriteProductEntity> favouriteProductEntities) {
        this.favouriteProductEntities = favouriteProductEntities;
    }

    public void setInformation(final String information) {
        this.information = information;
    }

    public void setMainImages(final Set<ProductMainImageEntity> mainImages) {
        this.mainImages = mainImages;
    }

    public void setName(final String name) {
        this.name = name;
    }

    public void setOwner(final UserEntity owner) {
        this.owner = owner;
    }

    public void setPrice(final Double price) {
        this.price = price;
    }

    public void setPublishedDate(final DateTime publishedDate) {
        this.publishedDate = publishedDate;
    }

    public void setPurchasable(final Boolean purchasable) {
        this.purchasable = purchasable;
    }

    public void setSecondaryImages(final Set<ProductSecondaryImageEntity> secondaryImages) {
        this.secondaryImages = secondaryImages;
    }

    public void setSellType(final SellType sellType) {
        this.sellType = sellType;
    }

    public void setShipmentId(final String shipmentId) {
        this.shipmentId = shipmentId;
    }

    public void setShipmentType(final ShipmentType shipmentType) {
        this.shipmentType = shipmentType;
    }

    public void setSoldDate(final DateTime soldDate) {
        this.soldDate = soldDate;
    }

    public void setStatus(final ProductStatus status) {
        this.status = status;
    }

    public void setTags(final Set<ProductTagEntity> tags) {
        this.tags = tags;
    }
}
